<?xml version="1.0" encoding="utf-8" ?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <UsingTask
    TaskName="CsLexProxy"
    TaskFactory="CodeTaskFactory"
    AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll" >
    <ParameterGroup>
      <TargetAssemblySimpleName ParameterType="System.String" Required="true" />
      <TargetClassSimpleName ParameterType="System.String" Required="true" />
      <References ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
      <Parameters ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
      <Returns ParameterType="Microsoft.Build.Framework.ITaskItem[]" Output="true" />
    </ParameterGroup>
      <Task>
<!--      <Reference Include="System.Xml.dll"/>-->

        <Using Namespace="System" />
        <Using Namespace="System.Collections.Generic" />
        <Using Namespace="System.Diagnostics" />
        <Using Namespace="System.IO" />
        <Using Namespace="System.Linq" />
        <Using Namespace="System.Reflection" />

        <Using Namespace="Microsoft.Build.Framework" />
        <Using Namespace="Microsoft.Build.Utilities" />
        <Code Type="Fragment" Language="cs">
<![CDATA[      try
      {
        // Transform in-parameters
        var paramin = new List<KeyValuePair<string, Dictionary<string, string>>>();
        foreach(ITaskItem item in Parameters)
        {
          string paramname = item.GetMetadata("ParameterName");
          if(string.IsNullOrEmpty(paramname))
            throw new InvalidOperationException(string.Format("The parameter task item {0} does not have the ParameterName metadata specified.", item));
          var metadata = new Dictionary<string, string>(StringComparer.InvariantCultureIgnoreCase);
          foreach(string metaname in item.MetadataNames)
            metadata[metaname] = item.GetMetadata(metaname);

          Log.LogMessage(MessageImportance.Low, "Got parameter {0} spec {1}.", paramname, item.ItemSpec);
          paramin.Add(new KeyValuePair<string, Dictionary<string, string>>(paramname, metadata));
        }

        // Find the task implementation
        string pathToTaskAssembly;
        try
        {
          pathToTaskAssembly = References.Where(item => string.Equals(Path.GetFileNameWithoutExtension(item.ItemSpec), TargetAssemblySimpleName, StringComparison.InvariantCultureIgnoreCase)).Single().ItemSpec;
          Log.LogMessage(MessageImportance.Normal, "Resolved Task assembly by simple name {0} as a project assembly reference at {1}.", TargetAssemblySimpleName, pathToTaskAssembly);
        }
        catch(Exception ex)
        {
          throw new InvalidOperationException(string.Format("Could not resolve the in-solution-compiled Task assembly by simple name {0} among the project assembly references. Make sure that the task consuming project references the task producing project so that it could be resolved correctly, and does it once. {1}", TargetAssemblySimpleName, ex.Message), ex);
        }
        Type typeTask;
        try
        {
          typeTask = Assembly.LoadFrom(pathToTaskAssembly).ExportedTypes.Where(t => string.Equals(t.Name, TargetClassSimpleName, StringComparison.Ordinal)).Single();
          Log.LogMessage(MessageImportance.Normal, "Loaded Task class by simple name {0} as {1}.", TargetClassSimpleName, typeTask);
        }
        catch(Exception ex)
        {
          throw new InvalidOperationException(string.Format("Could not load the in-solution-compiled Task class with simple name {2} in assembly with simple name {0} from the project assembly references, located at {3}. {1}", TargetAssemblySimpleName, ex.Message, TargetClassSimpleName, pathToTaskAssembly), ex);
        }

        // When the task runs, resolve its assembly loads into all known references of this project (and thus the task assembly and all of its references as well)
        ResolveEventHandler FAssemblyResolve = (sender, args) =>
        {
          string sSimpleName = new AssemblyName(args.Name).Name;
          foreach(ITaskItem item in References)
          {
            if(string.Equals(item.GetMetadata("Filename"), sSimpleName, StringComparison.InvariantCultureIgnoreCase))
            {
              Log.LogMessage(MessageImportance.Normal, "Task Proxy resolved an assembly load request for {0} into an assembly reference {1}.", args.Name, item.ItemSpec);
              return Assembly.LoadFrom(item.GetMetadata("FullPath"));
            }
          }
          {
            Log.LogMessage(MessageImportance.Normal, "Task Proxy could not resolve an assembly load request for {0}.", args.Name);
            return null;
          }
        };
        var paramout = new List<KeyValuePair<string, Dictionary<string, string>>>();
        AppDomain.CurrentDomain.AssemblyResolve += FAssemblyResolve;
        try
        {
          // This here runs the task
          Activator.CreateInstance(typeTask, paramin, paramout);
        }
        finally
        {
          AppDomain.CurrentDomain.AssemblyResolve -= FAssemblyResolve;
        }

        // Transform out parameters
        Returns = paramout.Select(param => new TaskItem(param.Key, param.Value)).Cast<ITaskItem>().ToArray();

        return true;
      }
      catch(Exception ex)
      {
        Log.LogError(ex.Message);
        Log.LogMessage(MessageImportance.High, ex.ToString());
        return false;
      }
]]>
      </Code>
    </Task>
  </UsingTask>
	
	<Choose>
		<When Condition="($(IsOutputPathInSeparateFolders) == True) AND ($(IsPsiTasksInSources) == True)"><PropertyGroup><CsLex_TaskDll>$(ProductBinariesDir)\Psi.Features.Tasks\CsLex\CsLex.exe</CsLex_TaskDll></PropertyGroup></When>
		<Otherwise><PropertyGroup><CsLex_TaskDll>$(PsiGenToolsDir)\CsLex.exe</CsLex_TaskDll></PropertyGroup></Otherwise>
	</Choose>

	<UsingTask
		TaskName="JetBrains.Build.Tools.CsLex"
		AssemblyFile="$(CsLex_TaskDll)"
	/>

</Project>